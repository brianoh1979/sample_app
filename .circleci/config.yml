
# version: 2
 jobs:
   build:
     machine:
       image: ubuntu-1604:202004-01
     steps:
       - checkout
#       - run: gem install pg -v '0.20.0' --source 'https://rubygems.org/'
       - run: sudo apt-get update
#       - run: bundle update --bundler
       # Below step should kick in from second run onwards
       - restore_cache:
          keys:
            - gem-cache-v1-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
            - gem-cache-v1-{{ arch }}-{{ .Branch }}
            - gem-cache-v1
#       - run: bundle install     
       - save_cache:
          key: gem-cache-v1-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
          paths:
          - vendor/bundle
   #Start of the Unit Testing section
   unittest:
     machine:
       image: ubuntu-1604:202004-01
     parallelism: 4
     #Above runs the tests across four containers instead of one
     steps:
       - checkout
       - run:
           name: Check free space of Machine Executor
           command: echo "This jobs is still running...""
           background: true
 #      - run: apt-get update
       - run: sudo apt-get update
       - run: sudo apt-get install -y nodejs
       - run: sudo apt-get install -y tzdata
       - restore_cache:
          keys:
            - gem-cache-v1-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
            - gem-cache-v1-{{ arch }}-{{ .Branch }}
            - gem-cache-v1
       - run: bundle update --bundler
       - run: rake db:test:prepare 
       - run:
           command: |
             echo $(circleci tests glob "spec/features/models/*.rb") 
             circleci tests glob "spec/features/models/*.rb" | xargs -n 1 echo           
       - run: TESTFILES=$(circleci tests glob "spec/features/models/*.rb" | circleci tests split --split-by=timings --timings-type=filename)
       - run: echo $TESTFILES
       - run: bundle exec rspec  --profile 10 --tag ~skip_in_ci --format progress --format documentation --format RspecJunitFormatter -o ~/rspec/rspec.xml -- ${TESTFILES}
       - store_test_results:
           path: test-results/rspec
       - store_artifacts:
           path: test-results/rspec
   #Start of Browser testing
   browsertest:
     machine:
       image: ubuntu-1604:202004-01
     #Above runs the tests across four containers instead of one
     steps:
       - checkout
  #     - run: apt-get update
       - run: sudo apt-get update
       - run: sudo apt-get upgrade -y  
       - run: sudo apt-get install apt-transport-https
       - restore_cache:
          keys:
            - gem-cache-v1-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
            - gem-cache-v1-{{ arch }}-{{ .Branch }}
            - gem-cache-v1
       - run: curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -
       - run: sudo apt-get install -y nodejs
       - run: sudo apt-get install -y tzdata
       - run:
          name: Install Cypress dependencies
          command: sudo apt-get -y install xvfb libgtk-3-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 --fix-missing
       - run:
          name: install cypress
          command: npm install cypress --save-dev
  #     - run: bundle update --bundler
       - run:
           name: Boot rails server
           command: bin/rails s
           background: true
       - run: mkdir /tmp/results
       - run: npm install --save-dev mocha mochawesome mochawesome-merge mochawesome-report-generator
       - run: # open cypress and use sample_spec.js
          name: run
          command: $(npm bin)/cypress run -- --record --spec "cypress/integration/sample_spec.js" --reporter junit \ --reporter-options "mochaFile=XML/my-test-output.xml,toConsole=true"
       - store_test_results:
           path: /tmp/results
       - store_artifacts:
           path: /tmp/results
           destination: results
   #Linters and static code analysis
   lintertest:
     machine:
       image: ubuntu-1604:202004-01
     steps:
       - checkout
   #    - run: apt-get update
       - run: sudo apt-get update
       - restore_cache:
          keys:
            - gem-cache-v1-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
            - gem-cache-v1-{{ arch }}-{{ .Branch }}
            - gem-cache-v1
 #      - run: gem install bundler:2.0.1
 #      - run: bundle update --bundler
       - run: bundle-audit check --ignore CVE-2015-7580 CVE-2015-7578 CVE-2015-7579
       - run: rails_best_practices .
   #Code Coverage
   codecoveragetest:
     machine:
       image: ubuntu-1604:202004-01
     steps:
       - checkout
  #     - run: apt-get update
       - run: sudo apt-get update
       - run: sudo apt-get install -y nodejs
       - run: sudo apt-get install -y tzdata
       - restore_cache:
          keys:
            - gem-cache-v1-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
            - gem-cache-v1-{{ arch }}-{{ .Branch }}
            - gem-cache-v1
  #     - run: bundle update --bundler
       - run: rake db:test:prepare
       - run: rails test
       - store_artifacts: # for display in Artifacts: https://circleci.com/docs/2.0/artifacts/ 
          path: coverage
          prefix: coverage
    #Deploy job
   deploy:
     machine:
       image: ubuntu-1604:202004-01
     #Above runs the tests across four containers instead of one
     steps:
       - checkout
  #     - run: apt-get update
  #     - run: apt-get install sudo
       - run: sudo apt-get update
       - restore_cache:
          keys:
            - gem-cache-v1-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
            - gem-cache-v1-{{ arch }}-{{ .Branch }}
            - gem-cache-v1
       - run:
           name: Deploy Master to Heroku
           command: |
             git push https://heroku:$HEROKU_API_KEY@git.heroku.com/thawing-cliffs-50633.git master

# orbs:
#   slack: circleci/slack@3.4.1
 version: 2.1

 workflows:
   version: 2
   build_and_test:
     jobs:
       - build
       - unittest:
           requires:
             - build
       - browsertest:
           requires:
             - build
       - lintertest:
           requires:
             - build
       - codecoveragetest:
           requires:
             - build
       - deploy:
           requires:
             - unittest
             - browsertest
             - lintertest
             - codecoveragetest
           filters:
             branches:
               only: master

         
