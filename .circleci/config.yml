#This is my config file for CircleCI
# version: 2.0

 jobs:
   build:
     docker:
       - image: circleci/ruby:2.6.3-node-browsers
     steps:
       - checkout
 #      - run: sudo apt-get update
       - deploy:
           name: conditionally run a deploy job
           command: |
            # replace this with your build/deploy check (i.e. current branch is "release")
            # if [[ $CIRCLE_BRANCH = "develop" ]]; then
             #  curl --user ${CIRCLE_API_USER_TOKEN}: --request GET https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/$CIRCLE_BUILD_NUM | jq '.["workflows"]["workflow_id"]'
             verdict=$(curl --user ${CIRCLE_API_USER_TOKEN}: --request GET https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/$CIRCLE_BUILD_NUM)
             echo $verdict
             verdict2=$(echo $verdict | jq '.["is_first_green_build"]') 
             echo $verdict2
             if [[ $verdict2 == *false* ]]; then
               echo "This is not the first successful run"
               curl --user ${CIRCLE_API_USER_TOKEN}: \
                 --data build_parameters[CIRCLE_JOB]=deploy_docker \
                 --data revision=$CIRCLE_SHA1 \
                 https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/tree/$CIRCLE_BRANCH
             else
               echo "This is the first successful run"
               fi

   deploy_docker:
     docker:
       - image: circleci/ruby:2.6.3-node-browsers
 #      - image: brianoh1979/bohruby:ruby263

     steps:
       - run:
           command: |
             if [ ! -x /bin/bash ]; then
               echo Bash not installed.
               exit 1
             fi
           name: Provide error if non-bash shell
       - run:
           command: |
            # Provide error if no webhook is set and error. Otherwise continue
             if [ -z "<< parameters.webhook >>" ]; then
               echo "NO SLACK WEBHOOK SET"
               echo "Please input your SLACK_WEBHOOK value either in the settings for this project, or as a parameter for this orb."
               exit 1
             else
            # Webhook properly set.
               echo Notifying Slack Channel
            #Create Members string
               if [ -n "<< parameters.mentions >>" ]; then
                 IFS="," read -ra SLACK_MEMBERS \<<< "<< parameters.mentions >>"
                 for i in "${SLACK_MEMBERS[@]}"; do
                   if [ $(echo ${i} | head -c 1) == "S" ]; then
                     SLACK_MENTIONS="${SLACK_MENTIONS}<!subteam^${i}> "
                   elif echo ${i} | grep -E "^(here|channel|everyone)$" > /dev/null; then
                     SLACK_MENTIONS="${SLACK_MENTIONS}<!${i}> "
                   else
                     SLACK_MENTIONS="${SLACK_MENTIONS}<@${i}> "
                   fi
                 done
               fi
               curl -X POST -H 'Content-type: application/json' \
                 --data \
                 "{ \
                   <<# parameters.channel >>
                   \"channel\": \"<< parameters.channel >>\", \
                   <</ parameters.channel >>
                   \"attachments\": [ \
                     { \
                       \"fallback\": \"<< parameters.message >> - $CIRCLE_BUILD_URL\", \
                       \"text\": \"<< parameters.message >> $SLACK_MENTIONS\", \
                       \"author_name\": \"<< parameters.author_name >>\", \
                       \"author_link\": \"<< parameters.author_link >>\", \
                       \"title\": \"<< parameters.title >>\", \
                       \"title_link\": \"<< parameters.title_link >>\", \
                       \"footer\": \"<< parameters.footer >>\", \
                       \"ts\": \"<< parameters.ts >>\", \
                       \"fields\": [ \
                         <<# parameters.include_project_field >>
                         { \
                           \"title\": \"Project\", \
                           \"value\": \"$CIRCLE_PROJECT_REPONAME\", \
                           \"short\": true \
                         }, \
                         <</ parameters.include_project_field >>
                         <<# parameters.include_job_number_field >>
                         { \
                           \"title\": \"Job Number\", \
                           \"value\": \"$CIRCLE_BUILD_NUM\", \
                           \"short\": true \
                         } \
                         <</ parameters.include_job_number_field >>
                       ], \
                       \"actions\": [ \
                        <<# parameters.include_visit_job_action >>
                         { \
                           \"type\": \"button\", \
                           \"text\": \"Visit Job\", \
                           \"url\": \"$CIRCLE_BUILD_URL\" \
                         } \
                         <</ parameters.include_visit_job_action >>
                       ], \
                       \"color\": \"<< parameters.color >>\" \
                     } \
                   ] \
                 }" << parameters.webhook >>
             fi
           name: Slack Notification
           shell: /bin/bash
 version: 2.1

 #     - run: echo "Triggered via API"
 #     - run: exit 0
 #     - slack/notify:
 #         channel: CQ4NHT0DC
 #         color: '#42e2f4'
 #         message: This is a custom orb message notification that job worked
 #         webhook: '${SLACK_WEBHOOK}'
# orbs:
#   slack: circleci/slack@3.4.1
# version: 2.1

 #orbs:
 #  slack: circleci/slack@3.4.1
 #version: 2.1
     
 workflows:
   version: 2
   build_and_test:
     jobs:
       - build

